#!/usr/bin/env python3

import unittest
import argparse
import sys
import os


def load_tests():
    suite = unittest.TestLoader().discover(".")

    tests = {}

    def flatten(suite):
        if hasattr(suite, "__iter__"):
            for x in suite:
                flatten(x)
        else:
            tests[suite.id()] = suite

    flatten(suite)

    return suite, tests


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--list", action="store_true", help="List all tests")
    parser.add_argument("-t", "--trace", action="store_true", help="Dump waveforms")
    parser.add_argument("-v", "--verbosity", type=int, choices=[1, 2], default=1, help="Verbosity level")
    parser.add_argument("test_name", nargs="?")

    args = parser.parse_args()

    suite, tests = load_tests()

    if args.list:
        for name in tests:
            print(name)
        return

    runner = unittest.TextTestRunner(verbosity=args.verbosity)

    if args.trace:
        os.environ["__COREBLOCKS_DUMP_TRACES"] = "1"

    if args.test_name:
        if args.test_name not in tests:
            print(f"Could not find test '{args.test_name}'")
            sys.exit(1)

        to_run = tests[args.test_name]
    else:
        to_run = suite

    result = runner.run(to_run)

    sys.exit(not result.wasSuccessful())


if __name__ == "__main__":
    main()
