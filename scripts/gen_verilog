#!/usr/bin/env python3

import os
import sys
import argparse

from typing import Optional

from amaranth.build import Platform
from amaranth.back import verilog
from amaranth import Module, Elaboratable, Cat

class Top(Elaboratable):
    def __init__(self, gen_params):
        from coreblocks.params.genparams import GenParams
        from coreblocks.peripherals.wishbone import WishboneMaster, WishboneParameters

        self.gp: GenParams = gen_params

        wb_params = WishboneParameters(data_width=32, addr_width=30)

        self.wb_master_instr = WishboneMaster(wb_params=wb_params)
        self.wb_master_data = WishboneMaster(wb_params=wb_params)

    def elaborate(self, platform: Platform):
        from coreblocks.core import Core
        from coreblocks.transactions import TransactionModule

        m = Module()
        tm = TransactionModule(m)
    
        self.core = Core(gen_params=self.gp, wb_master_instr=self.wb_master_instr, wb_master_data=self.wb_master_data)

        m.submodules.wb_master_instr = self.wb_master_instr
        m.submodules.wb_master_data = self.wb_master_data
        m.submodules.c = self.core

        return tm

def gen_verilog():
    from coreblocks.params.genparams import GenParams
    from coreblocks.params.configurations import basic_configuration

    top = Top(GenParams("rv32i", basic_configuration))

    with open("core.v", "w") as f:
        signals = list(top.wb_master_instr.wbMaster.fields.values()) + list(top.wb_master_data.wbMaster.fields.values())

        f.write(verilog.convert(top, ports=signals, strip_internal_attrs=True))

def main():
    parent = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    sys.path.insert(0, parent)

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Enables verbose output. Default: %(default)s",
    )

    args = parser.parse_args()

    os.environ["AMARANTH_verbose"] = "true" if args.verbose else "false"

    gen_verilog()


if __name__ == "__main__":
    main()
