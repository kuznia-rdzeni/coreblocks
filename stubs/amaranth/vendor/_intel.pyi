"""
This type stub file was generated by pyright.
"""

from ..hdl import *
from ..build import *

class IntelPlatform(TemplatedPlatform):
    """
    .. rubric:: Quartus toolchain

    Required tools:
        * ``quartus_map``
        * ``quartus_fit``
        * ``quartus_asm``
        * ``quartus_sta``

    The environment is populated by running the script specified in the environment variable
    ``AMARANTH_ENV_QUARTUS``, if present.

    Available overrides:
        * ``add_settings``: inserts commands at the end of the QSF file.
        * ``add_constraints``: inserts commands at the end of the SDC file.
        * ``nproc``: sets the number of cores used by all tools.
        * ``quartus_map_opts``: adds extra options for ``quartus_map``.
        * ``quartus_fit_opts``: adds extra options for ``quartus_fit``.
        * ``quartus_asm_opts``: adds extra options for ``quartus_asm``.
        * ``quartus_sta_opts``: adds extra options for ``quartus_sta``.

    Build products:
        * ``*.rpt``: toolchain reports.
        * ``{{name}}.sof``: bitstream as SRAM object file.
        * ``{{name}}.rbf``: bitstream as raw binary file.


    .. rubric:: Mistral toolchain

    Required tools:
        * ``yosys``
        * ``nextpnr-mistral``

    The environment is populated by running the script specified in the environment variable
    ``AMARANTH_ENV_MISTRAL``, if present.

        * ``verbose``: enables logging of informational messages to standard error.
        * ``read_verilog_opts``: adds options for ``read_verilog`` Yosys command.
        * ``synth_opts``: adds options for ``synth_intel_alm`` Yosys command.
        * ``script_after_read``: inserts commands after ``read_ilang`` in Yosys script.
        * ``script_after_synth``: inserts commands after ``synth_intel_alm`` in Yosys script.
        * ``yosys_opts``: adds extra options for ``yosys``.
        * ``nextpnr_opts``: adds extra options for ``nextpnr-mistral``.
    """
    toolchain = ...
    device = ...
    package = ...
    speed = ...
    suffix = ...
    quartus_suppressed_warnings = ...
    quartus_required_tools = ...
    quartus_file_templates = ...
    quartus_command_templates = ...
    mistral_required_tools = ...
    mistral_file_templates = ...
    mistral_command_templates = ...
    def __init__(self, *, toolchain=...) -> None:
        ...
    
    @property
    def required_tools(self): # -> list[str]:
        ...
    
    @property
    def file_templates(self): # -> dict[str, str]:
        ...
    
    @property
    def command_templates(self): # -> list[str]:
        ...
    
    def add_clock_constraint(self, clock, frequency): # -> None:
        ...
    
    @property
    def default_clk_constraint(self): # -> Clock:
        ...
    
    def create_missing_domain(self, name): # -> Module | None:
        ...
    
    def get_input(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_output(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_tristate(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_input_output(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_diff_input(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_diff_output(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_diff_tristate(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_diff_input_output(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_ff_sync(self, ff_sync): # -> Instance:
        ...
    
    def get_async_ff_sync(self, async_ff_sync): # -> Module:
        ...
    


