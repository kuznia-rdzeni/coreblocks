"""
This type stub file was generated by pyright.
"""

from ..hdl import *
from ..build import *

class LatticeMachXO2Or3LPlatform(TemplatedPlatform):
    """
    Required tools:
        * ``pnmainc``
        * ``ddtcmd``

    The environment is populated by running the script specified in the environment variable
    ``AMARANTH_ENV_DIAMOND``, if present. On Linux, diamond_env as provided by Diamond
    itself is a good candidate. On Windows, the following script (named ``diamond_env.bat``,
    for instance) is known to work::

        @echo off
        set PATH=C:\\lscc\\diamond\\%DIAMOND_VERSION%\\bin\\nt64;%PATH%

    Available overrides:
        * ``script_project``: inserts commands before ``prj_project save`` in Tcl script.
        * ``script_after_export``: inserts commands after ``prj_run Export`` in Tcl script.
        * ``add_preferences``: inserts commands at the end of the LPF file.
        * ``add_constraints``: inserts commands at the end of the XDC file.

    Build products:
        * ``{{name}}_impl/{{name}}_impl.htm``: consolidated log.
        * ``{{name}}.jed``: JEDEC fuse file.
        * ``{{name}}.bit``: binary bitstream.
        * ``{{name}}.svf``: JTAG programming vector for FLASH programming.
        * ``{{name}}_flash.svf``: JTAG programming vector for FLASH programming.
        * ``{{name}}_sram.svf``: JTAG programming vector for SRAM programming.
    """
    toolchain = ...
    device = ...
    package = ...
    speed = ...
    grade = ...
    required_tools = ...
    file_templates = ...
    command_templates = ...
    _supported_osch_freqs = ...
    @property
    def default_clk_constraint(self): # -> Clock:
        ...
    
    def create_missing_domain(self, name): # -> Module | None:
        ...
    
    _single_ended_io_types = ...
    _differential_io_types = ...
    def should_skip_port_component(self, port, attrs, component): # -> bool:
        ...
    
    def get_input(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_output(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_tristate(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_input_output(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_diff_input(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_diff_output(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_diff_tristate(self, pin, port, attrs, invert): # -> Module:
        ...
    
    def get_diff_input_output(self, pin, port, attrs, invert): # -> Module:
        ...
    


