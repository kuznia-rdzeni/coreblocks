"""
This type stub file was generated by pyright.
"""

from contextlib import _GeneratorContextManager, contextmanager
from .ast import *
from .ir import *
from .cd import *
from .xfrm import *

__all__ = ["SyntaxError", "SyntaxWarning", "Module"]
class SyntaxError(Exception):
    ...


class SyntaxWarning(Warning):
    ...


class _ModuleBuilderProxy:
    def __init__(self, builder, depth) -> None:
        ...
    


class _ModuleBuilderDomain(_ModuleBuilderProxy):
    def __init__(self, builder, depth, domain) -> None:
        ...
    
    def __iadd__(self, assigns): # -> Self@_ModuleBuilderDomain:
        ...
    


class _ModuleBuilderDomains(_ModuleBuilderProxy):
    def __getattr__(self, name): # -> _ModuleBuilderDomain:
        ...
    
    def __getitem__(self, name): # -> _ModuleBuilderDomain:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __setitem__(self, name, value): # -> None:
        ...
    


class _ModuleBuilderRoot:
    def __init__(self, builder, depth) -> None:
        ...
    
    def __getattr__(self, name):
        ...
    


class _ModuleBuilderSubmodules:
    def __init__(self, builder) -> None:
        ...
    
    def __iadd__(self, modules): # -> Self@_ModuleBuilderSubmodules:
        ...
    
    def __setattr__(self, name, submodule): # -> None:
        ...
    
    def __setitem__(self, name, value): # -> None:
        ...
    
    def __getattr__(self, name):
        ...
    
    def __getitem__(self, name):
        ...
    


class _ModuleBuilderDomainSet:
    def __init__(self, builder) -> None:
        ...
    
    def __iadd__(self, domains): # -> Self@_ModuleBuilderDomainSet:
        ...
    
    def __setattr__(self, name, domain): # -> None:
        ...
    


class _GuardedContextManager(_GeneratorContextManager):
    def __init__(self, keyword, func, args, kwds) -> None:
        ...
    
    def __bool__(self):
        ...
    


class FSM:
    def __init__(self, state, encoding, decoding) -> None:
        ...
    
    def ongoing(self, name): # -> Operator:
        ...
    


class Module(_ModuleBuilderRoot, Elaboratable):
    @classmethod
    def __init_subclass__(cls):
        ...
    
    def __init__(self) -> None:
        ...
    
    @_guardedcontextmanager("If")
    def If(self, cond): # -> Generator[None, None, None]:
        ...
    
    @_guardedcontextmanager("Elif")
    def Elif(self, cond): # -> Generator[None, None, None]:
        ...
    
    @_guardedcontextmanager("Else")
    def Else(self): # -> Generator[None, None, None]:
        ...
    
    @contextmanager
    def Switch(self, test): # -> Generator[None, None, None]:
        ...
    
    @contextmanager
    def Case(self, *patterns):
        ...
    
    def Default(self): # -> _GeneratorContextManager[Unknown]:
        ...
    
    @contextmanager
    def FSM(self, reset=..., domain=..., name=...): # -> Generator[FSM, None, None]:
        ...
    
    @contextmanager
    def State(self, name): # -> Generator[None, None, None]:
        ...
    
    @property
    def next(self):
        ...
    
    @next.setter
    def next(self, name): # -> None:
        ...
    
    def elaborate(self, platform): # -> Fragment:
        ...
    


