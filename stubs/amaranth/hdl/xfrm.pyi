"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod
from .ast import *
from .cd import *
from .ir import *
from .rec import *

__all__ = ["ValueVisitor", "ValueTransformer", "StatementVisitor", "StatementTransformer", "FragmentTransformer", "TransformedElaboratable", "DomainCollector", "DomainRenamer", "DomainLowerer", "SampleDomainInjector", "SampleLowerer", "SwitchCleaner", "LHSGroupAnalyzer", "LHSGroupFilter", "ResetInserter", "EnableInserter"]
class ValueVisitor(metaclass=ABCMeta):
    @abstractmethod
    def on_Const(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_AnyConst(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_AnySeq(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_Signal(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_ClockSignal(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_ResetSignal(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_Operator(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_Slice(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_Part(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_Cat(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_Repl(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_ArrayProxy(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_Sample(self, value): # -> None:
        ...
    
    @abstractmethod
    def on_Initial(self, value): # -> None:
        ...
    
    def on_unknown_value(self, value):
        ...
    
    def replace_value_src_loc(self, value, new_value): # -> Literal[True]:
        ...
    
    def on_value(self, value):
        ...
    
    def __call__(self, value):
        ...
    


class ValueTransformer(ValueVisitor):
    def on_Const(self, value):
        ...
    
    def on_AnyConst(self, value):
        ...
    
    def on_AnySeq(self, value):
        ...
    
    def on_Signal(self, value):
        ...
    
    def on_ClockSignal(self, value):
        ...
    
    def on_ResetSignal(self, value):
        ...
    
    def on_Operator(self, value): # -> Operator:
        ...
    
    def on_Slice(self, value): # -> Slice:
        ...
    
    def on_Part(self, value): # -> Part:
        ...
    
    def on_Cat(self, value): # -> Cat:
        ...
    
    def on_Repl(self, value): # -> Repl:
        ...
    
    def on_ArrayProxy(self, value): # -> ArrayProxy:
        ...
    
    def on_Sample(self, value): # -> Sample:
        ...
    
    def on_Initial(self, value):
        ...
    


class StatementVisitor(metaclass=ABCMeta):
    @abstractmethod
    def on_Assign(self, stmt): # -> None:
        ...
    
    @abstractmethod
    def on_Assert(self, stmt): # -> None:
        ...
    
    @abstractmethod
    def on_Assume(self, stmt): # -> None:
        ...
    
    @abstractmethod
    def on_Cover(self, stmt): # -> None:
        ...
    
    @abstractmethod
    def on_Switch(self, stmt): # -> None:
        ...
    
    @abstractmethod
    def on_statements(self, stmts): # -> None:
        ...
    
    def on_unknown_statement(self, stmt):
        ...
    
    def replace_statement_src_loc(self, stmt, new_stmt): # -> Literal[True]:
        ...
    
    def on_statement(self, stmt):
        ...
    
    def __call__(self, stmt):
        ...
    


class StatementTransformer(StatementVisitor):
    def on_value(self, value):
        ...
    
    def on_Assign(self, stmt): # -> Assign:
        ...
    
    def on_Assert(self, stmt): # -> Assert:
        ...
    
    def on_Assume(self, stmt): # -> Assume:
        ...
    
    def on_Cover(self, stmt): # -> Cover:
        ...
    
    def on_Switch(self, stmt): # -> Switch:
        ...
    
    def on_statements(self, stmts): # -> _StatementList:
        ...
    


class FragmentTransformer:
    def map_subfragments(self, fragment, new_fragment): # -> None:
        ...
    
    def map_ports(self, fragment, new_fragment): # -> None:
        ...
    
    def map_named_ports(self, fragment, new_fragment): # -> None:
        ...
    
    def map_domains(self, fragment, new_fragment): # -> None:
        ...
    
    def map_statements(self, fragment, new_fragment): # -> None:
        ...
    
    def map_drivers(self, fragment, new_fragment): # -> None:
        ...
    
    def on_fragment(self, fragment): # -> Instance | Fragment:
        ...
    
    def __call__(self, value, *, src_loc_at=...): # -> Instance | Fragment | TransformedElaboratable:
        ...
    


class TransformedElaboratable(Elaboratable):
    def __init__(self, elaboratable, *, src_loc_at=...) -> None:
        ...
    
    def __getattr__(self, attr): # -> Any:
        ...
    
    def elaborate(self, platform): # -> Fragment:
        ...
    


class DomainCollector(ValueVisitor, StatementVisitor):
    def __init__(self) -> None:
        ...
    
    def on_ignore(self, value): # -> None:
        ...
    
    on_Const = ...
    on_AnyConst = ...
    on_AnySeq = ...
    on_Signal = ...
    def on_ClockSignal(self, value): # -> None:
        ...
    
    def on_ResetSignal(self, value): # -> None:
        ...
    
    def on_Operator(self, value): # -> None:
        ...
    
    def on_Slice(self, value): # -> None:
        ...
    
    def on_Part(self, value): # -> None:
        ...
    
    def on_Cat(self, value): # -> None:
        ...
    
    def on_Repl(self, value): # -> None:
        ...
    
    def on_ArrayProxy(self, value): # -> None:
        ...
    
    def on_Sample(self, value): # -> None:
        ...
    
    def on_Initial(self, value): # -> None:
        ...
    
    def on_Assign(self, stmt): # -> None:
        ...
    
    def on_property(self, stmt): # -> None:
        ...
    
    on_Assert = ...
    on_Assume = ...
    on_Cover = ...
    def on_Switch(self, stmt): # -> None:
        ...
    
    def on_statements(self, stmts): # -> None:
        ...
    
    def on_fragment(self, fragment): # -> None:
        ...
    
    def __call__(self, fragment): # -> None:
        ...
    


class DomainRenamer(FragmentTransformer, ValueTransformer, StatementTransformer):
    def __init__(self, domain_map) -> None:
        ...
    
    def on_ClockSignal(self, value): # -> ClockSignal:
        ...
    
    def on_ResetSignal(self, value): # -> ResetSignal:
        ...
    
    def map_domains(self, fragment, new_fragment): # -> None:
        ...
    
    def map_drivers(self, fragment, new_fragment): # -> None:
        ...
    


class DomainLowerer(FragmentTransformer, ValueTransformer, StatementTransformer):
    def __init__(self, domains=...) -> None:
        ...
    
    def map_drivers(self, fragment, new_fragment): # -> None:
        ...
    
    def replace_value_src_loc(self, value, new_value): # -> bool:
        ...
    
    def on_ClockSignal(self, value):
        ...
    
    def on_ResetSignal(self, value): # -> Const:
        ...
    
    def on_fragment(self, fragment): # -> Instance | Fragment:
        ...
    


class SampleDomainInjector(ValueTransformer, StatementTransformer):
    def __init__(self, domain) -> None:
        ...
    
    def on_Sample(self, value): # -> Sample:
        ...
    
    def __call__(self, stmts):
        ...
    


class SampleLowerer(FragmentTransformer, ValueTransformer, StatementTransformer):
    def __init__(self) -> None:
        ...
    
    def on_Sample(self, value): # -> Signal:
        ...
    
    def on_Initial(self, value): # -> Signal:
        ...
    
    def map_statements(self, fragment, new_fragment): # -> None:
        ...
    


class SwitchCleaner(StatementVisitor):
    def on_ignore(self, stmt):
        ...
    
    on_Assign = ...
    on_Assert = ...
    on_Assume = ...
    on_Cover = ...
    def on_Switch(self, stmt): # -> Switch | None:
        ...
    
    def on_statements(self, stmts): # -> _StatementList:
        ...
    


class LHSGroupAnalyzer(StatementVisitor):
    def __init__(self) -> None:
        ...
    
    def find(self, signal):
        ...
    
    def unify(self, root, *leaves): # -> None:
        ...
    
    def groups(self): # -> OrderedDict[Unknown, Unknown]:
        ...
    
    def on_Assign(self, stmt): # -> None:
        ...
    
    def on_property(self, stmt): # -> None:
        ...
    
    on_Assert = ...
    on_Assume = ...
    on_Cover = ...
    def on_Switch(self, stmt): # -> None:
        ...
    
    def on_statements(self, stmts): # -> None:
        ...
    
    def __call__(self, stmts): # -> OrderedDict[Unknown, Unknown]:
        ...
    


class LHSGroupFilter(SwitchCleaner):
    def __init__(self, signals) -> None:
        ...
    
    def on_Assign(self, stmt): # -> None:
        ...
    
    def on_property(self, stmt): # -> None:
        ...
    
    on_Assert = ...
    on_Assume = ...
    on_Cover = ...


class _ControlInserter(FragmentTransformer):
    def __init__(self, controls) -> None:
        ...
    
    def on_fragment(self, fragment): # -> Instance | Fragment:
        ...
    
    def __call__(self, value, *, src_loc_at=...): # -> Instance | Fragment | TransformedElaboratable:
        ...
    


class ResetInserter(_ControlInserter):
    ...


class EnableInserter(_ControlInserter):
    def on_fragment(self, fragment): # -> Instance | Fragment:
        ...
    


