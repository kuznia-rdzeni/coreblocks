"""
This type stub file was generated by pyright.
"""

from typing import Optional
from .ast import *
from .ir import Elaboratable, Fragment

__all__ = ["Memory", "ReadPort", "WritePort", "DummyPort", "MemoryInstance"]
class Memory:
    """A word addressable storage.
    Parameters
    ----------
    width : int
        Access granularity. Each storage element of this memory is ``width`` bits in size.
    depth : int
        Word count. This memory contains ``depth`` storage elements.
    init : list of int
        Initial values. At power on, each storage element in this memory is initialized to
        the corresponding element of ``init``, if any, or to zero otherwise.
        Uninitialized memories are not currently supported.
    name : str
        Name hint for this memory. If ``None`` (default) the name is inferred from the variable
        name this ``Signal`` is assigned to.
    attrs : dict
        Dictionary of synthesis attributes.
    Attributes
    ----------
    width : int
    depth : int
    init : list of int
    attrs : dict
    """
    width: int
    depth: int
    attrs: dict

    def __init__(self, *, width: int, depth: int, init: Optional[list[int]] = ..., name: Optional[str] = ..., attrs: dict = ..., simulate: bool = ...) -> None:
        ...
    
    @property
    def init(self) -> list[int]:
        ...
    
    @init.setter
    def init(self, new_init: list[int]) -> None:
        ...
    
    def read_port(self, *, src_loc_at=..., **kwargs) -> ReadPort:
        """Get a read port.

        See :c"""
        ...
    
    def write_port(self, *, src_loc_at=..., **kwargs) -> WritePort:
        """Get a write port.

        See :"""
        ...
    
    def __getitem__(self, index: int) -> ArrayProxy:
        """Simulation only."""
        ...
    


class ReadPort(Elaboratable):
    """A memory read port.

    Paramet"""
    memory: Memory
    domain: str
    transparent: bool
    addr: Signal
    data: Signal
    en: Signal | Const

    def __init__(self, memory, *, domain=..., transparent=..., src_loc_at=...) -> None:
        ...
    
    def elaborate(self, platform): # -> Instance:
        ...
    


class WritePort(Elaboratable):
    """A memory write port.

    Parame"""
    memory: Memory
    domain: str
    granularity: int
    addr: Signal
    data: Signal
    en: Signal

    def __init__(self, memory, *, domain=..., granularity=..., src_loc_at=...) -> None:
        ...
    
    def elaborate(self, platform): # -> Instance:
        ...
    


class DummyPort:
    """Dummy memory port.

    This por"""
    def __init__(self, *, data_width, addr_width, domain=..., name=..., granularity=...) -> None:
        ...
    

class MemoryInstance(Fragment):
    memory: Memory
    read_ports: list[ReadPort]
    write_ports: list[WritePort]
    attrs: dict
    def __init__(self, memory: Memory, read_ports: list[ReadPort], write_ports: list[WritePort]) -> None:
        ...
