"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from abc import ABCMeta, abstractmethod

__all__ = ["BuildPlan", "BuildProducts", "LocalBuildProducts", "RemoteSSHBuildProducts"]
class BuildPlan:
    def __init__(self, script) -> None:
        """A build plan.

        Parameter"""
        ...
    
    def add_file(self, filename, content): # -> None:
        """
        Add ``content``, which """
        ...
    
    def digest(self, size=...): # -> bytes:
        """
        Compute a `digest`, a s"""
        ...
    
    def archive(self, file): # -> None:
        """
        Archive files from the """
        ...
    
    def execute_local(self, root=..., *, run_script=...): # -> LocalBuildProducts:
        """
        Execute build plan usin"""
        ...
    
    def execute_remote_ssh(self, *, connect_to=..., root, run_script=...): # -> RemoteSSHBuildProducts:
        """
        Execute build plan usin"""
        ...
    
    def execute(self): # -> LocalBuildProducts:
        """
        Execute build plan usin"""
        ...
    


class BuildProducts(metaclass=ABCMeta):
    @abstractmethod
    def get(self, filename, mode=...): # -> None:
        """
        Extract ``filename`` fr"""
        ...
    
    @contextmanager
    def extract(self, *filenames): # -> Generator[Unknown | list[Unknown] | None, None, Unknown]:
        """
        Extract ``filenames`` f"""
        ...
    


class LocalBuildProducts(BuildProducts):
    def __init__(self, root) -> None:
        ...
    
    def get(self, filename, mode=...): # -> Any:
        ...
    


class RemoteSSHBuildProducts(BuildProducts):
    def __init__(self, connect_to, root) -> None:
        ...
    
    def get(self, filename, mode=...): # -> str | bytes:
        ...
    


