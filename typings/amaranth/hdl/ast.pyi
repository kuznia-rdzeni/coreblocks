"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod
from collections.abc import MutableMapping, MutableSequence, MutableSet
from .._utils import *
from .._unused import *

__all__ = [
    "Shape",
    "signed",
    "unsigned",
    "Value",
    "Const",
    "C",
    "AnyConst",
    "AnySeq",
    "Operator",
    "Mux",
    "Part",
    "Slice",
    "Cat",
    "Repl",
    "Array",
    "ArrayProxy",
    "Signal",
    "ClockSignal",
    "ResetSignal",
    "UserValue",
    "ValueCastable",
    "Sample",
    "Past",
    "Stable",
    "Rose",
    "Fell",
    "Initial",
    "Statement",
    "Switch",
    "Property",
    "Assign",
    "Assert",
    "Assume",
    "Cover",
    "ValueKey",
    "ValueDict",
    "ValueSet",
    "SignalKey",
    "SignalDict",
    "SignalSet",
]

class DUID:
    """Deterministic Unique IDentifier."""

    __next_uid = ...
    def __init__(self) -> None: ...

class Shape:
    """Bit width and signedness of a va"""

    def __init__(self, width=..., signed=...) -> None: ...
    def __iter__(self): ...
    @staticmethod
    def cast(obj, *, src_loc_at=...): ...
    def __repr__(self): ...
    def __eq__(self, other) -> bool: ...

def unsigned(width):  # -> Shape:
    """Shorthand for ``Shape(width, sig"""
    ...

def signed(width):  # -> Shape:
    """Shorthand for ``Shape(width, sig"""
    ...

class Value(metaclass=ABCMeta):
    @staticmethod
    def cast(obj):  # -> Value | Const:
        """Converts ``obj`` to an Amaranth"""
        ...
    def __init__(self, *, src_loc_at=...) -> None: ...
    def __bool__(self): ...
    def __invert__(self): ...
    def __neg__(self): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __mod__(self, other): ...
    def __rmod__(self, other): ...
    def __floordiv__(self, other): ...
    def __rfloordiv__(self, other): ...
    def __lshift__(self, other): ...
    def __rlshift__(self, other): ...
    def __rshift__(self, other): ...
    def __rrshift__(self, other): ...
    def __and__(self, other): ...
    def __rand__(self, other): ...
    def __xor__(self, other): ...
    def __rxor__(self, other): ...
    def __or__(self, other): ...
    def __ror__(self, other): ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __abs__(self): ...
    def __len__(self): ...
    def __getitem__(self, key): ...
    def as_unsigned(self):  # -> Operator:
        """Conversion to unsigned."""
        ...
    def as_signed(self):  # -> Operator:
        """Conversion to signed.

        R"""
        ...
    def bool(self):  # -> Operator:
        """Conversion to boolean."""
        ...
    def any(self):  # -> Operator:
        """Check if any bits are ``1``."""
        ...
    def all(self):  # -> Operator:
        """Check if all bits are ``1``."""
        ...
    def xor(self):  # -> Operator:
        """Compute pairwise exclusive-or of"""
        ...
    def implies(premise, conclusion):
        """Implication.

        Returns
        """
        ...
    def bit_select(self, offset, width):  # -> Slice | Cat | Part:
        """Part-select with bit granularity"""
        ...
    def word_select(self, offset, width):  # -> Slice | Cat | Part:
        """Part-select with word granularit"""
        ...
    def matches(self, *patterns):
        """Pattern matching.

        Match"""
        ...
    def shift_left(self, amount):  # -> Operator | Slice | Cat:
        """Shift left by constant amount."""
        ...
    def shift_right(self, amount):  # -> Operator | Slice | Cat:
        """Shift right by constant amount."""
        ...
    def rotate_left(self, amount):  # -> Cat:
        """Rotate left by constant amount."""
        ...
    def rotate_right(self, amount):  # -> Cat:
        """Rotate right by constant amount."""
        ...
    def eq(self, value):  # -> Assign:
        """Assignment.

        Parameters"""
        ...
    @abstractmethod
    def shape(self):  # -> None:
        """Bit width and signedness of a va"""
        ...
    __hash__ = ...

@final
class Const(Value):
    """A constant, literal integer valu"""

    src_loc = ...
    @staticmethod
    def normalize(value, shape): ...
    def __init__(self, value, shape=..., *, src_loc_at=...) -> None: ...
    def shape(self): ...
    def __repr__(self): ...

C = Const

class AnyValue(Value, DUID):
    def __init__(self, shape, *, src_loc_at=...) -> None: ...
    def shape(self): ...

@final
class AnyConst(AnyValue):
    def __repr__(self): ...

@final
class AnySeq(AnyValue):
    def __repr__(self): ...

@final
class Operator(Value):
    def __init__(self, operator, operands, *, src_loc_at=...) -> None: ...
    def shape(self): ...
    def __repr__(self): ...

def Mux(sel, val1, val0):  # -> Operator:
    """Choose between two values."""
    ...

@final
class Slice(Value):
    def __init__(self, value, start, stop, *, src_loc_at=...) -> None: ...
    def shape(self): ...
    def __repr__(self): ...

@final
class Part(Value):
    def __init__(self, value, offset, width, stride=..., *, src_loc_at=...) -> None: ...
    def shape(self): ...
    def __repr__(self): ...

@final
class Cat(Value):
    """Concatenate values.

    Form a"""

    def __init__(self, *args, src_loc_at=...) -> None: ...
    def shape(self): ...
    def __repr__(self): ...

@final
class Repl(Value):
    """Replicate a value

    An input"""

    def __init__(self, value, count, *, src_loc_at=...) -> None: ...
    def shape(self): ...
    def __repr__(self): ...

class Signal(Value, DUID):
    """A varying integer value.

    Pa"""

    def __init__(
        self, shape=..., *, name=..., reset=..., reset_less=..., attrs=..., decoder=..., src_loc_at=...
    ) -> None: ...
    @staticmethod
    def like(other, *, name=..., name_suffix=..., src_loc_at=..., **kwargs):  # -> Signal:
        """Create Signal based on another."""
        ...
    def shape(self): ...
    def __repr__(self): ...

@final
class ClockSignal(Value):
    """Clock signal for a clock domain."""

    def __init__(self, domain=..., *, src_loc_at=...) -> None: ...
    def shape(self): ...
    def __repr__(self): ...

@final
class ResetSignal(Value):
    """Reset signal for a clock domain."""

    def __init__(self, domain=..., allow_reset_less=..., *, src_loc_at=...) -> None: ...
    def shape(self): ...
    def __repr__(self): ...

class Array(MutableSequence):
    """Addressable multiplexer.

    An"""

    def __init__(self, iterable=...) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self): ...
    def __setitem__(self, index, value): ...
    def __delitem__(self, index): ...
    def insert(self, index, value): ...
    def __repr__(self): ...

@final
class ArrayProxy(Value):
    def __init__(self, elems, index, *, src_loc_at=...) -> None: ...
    def __getattr__(self, attr): ...
    def __getitem__(self, index): ...
    def shape(self): ...
    def __repr__(self): ...

class UserValue(Value):
    """Value with custom lowering."""

    @deprecated("instead of `UserValue`, use `Val", stacklevel=3)
    def __init__(self, *, src_loc_at=...) -> None: ...
    @abstractmethod
    def lower(self):  # -> None:
        """Conversion to a concrete represe"""
        ...
    def shape(self): ...

class ValueCastable:
    """Base class for classes which can"""

    def __new__(cls, *args, **kwargs): ...
    @staticmethod
    def lowermethod(func):  # -> (self: Unknown, *args: Unknown, **kwargs: Unknown) -> Unknown:
        """Decorator to memoize lowering me"""
        ...

@final
class Sample(Value):
    """Value from the past.

    A ``Sa"""

    def __init__(self, expr, clocks, domain, *, src_loc_at=...) -> None: ...
    def shape(self): ...
    def __repr__(self): ...

def Past(expr, clocks=..., domain=...): ...
def Stable(expr, clocks=..., domain=...): ...
def Rose(expr, clocks=..., domain=...): ...
def Fell(expr, clocks=..., domain=...): ...
@final
class Initial(Value):
    """Start indicator, for model check"""

    def __init__(self, *, src_loc_at=...) -> None: ...
    def shape(self): ...
    def __repr__(self): ...

class _StatementList(list):
    def __repr__(self): ...

class Statement:
    def __init__(self, *, src_loc_at=...) -> None: ...
    @staticmethod
    def cast(obj): ...

@final
class Assign(Statement):
    def __init__(self, lhs, rhs, *, src_loc_at=...) -> None: ...
    def __repr__(self): ...

class UnusedProperty(UnusedMustUse): ...

class Property(Statement, MustUse):
    _MustUse__warning = UnusedProperty
    def __init__(self, test, *, _check=..., _en=..., src_loc_at=...) -> None: ...
    def __repr__(self): ...

@final
class Assert(Property):
    _kind = ...

@final
class Assume(Property):
    _kind = ...

@final
class Cover(Property):
    _kind = ...

class Switch(Statement):
    def __init__(self, test, cases, *, src_loc=..., src_loc_at=..., case_src_locs=...) -> None: ...
    def __repr__(self): ...

class _MappedKeyCollection(metaclass=ABCMeta): ...

class _MappedKeyDict(MutableMapping, _MappedKeyCollection):
    def __init__(self, pairs=...) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def __delitem__(self, key): ...
    def __iter__(self): ...
    def __eq__(self, other) -> bool: ...
    def __len__(self): ...
    def __repr__(self): ...

class _MappedKeySet(MutableSet, _MappedKeyCollection):
    def __init__(self, elements=...) -> None: ...
    def add(self, value): ...
    def update(self, values): ...
    def discard(self, value): ...
    def __contains__(self, value): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __repr__(self): ...

class ValueKey:
    def __init__(self, value) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __repr__(self): ...

class ValueDict(_MappedKeyDict):
    _map_key = ...
    _unmap_key = ...

class ValueSet(_MappedKeySet):
    _map_key = ...
    _unmap_key = ...

class SignalKey:
    def __init__(self, signal) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __repr__(self): ...

class SignalDict(_MappedKeyDict):
    _map_key = ...
    _unmap_key = ...

class SignalSet(_MappedKeySet):
    _map_key = ...
    _unmap_key = ...
