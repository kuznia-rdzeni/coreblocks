"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod
from .ast import *
from .cd import *
from .ir import *
from .rec import *

__all__ = [
    "ValueVisitor",
    "ValueTransformer",
    "StatementVisitor",
    "StatementTransformer",
    "FragmentTransformer",
    "TransformedElaboratable",
    "DomainCollector",
    "DomainRenamer",
    "DomainLowerer",
    "SampleDomainInjector",
    "SampleLowerer",
    "SwitchCleaner",
    "LHSGroupAnalyzer",
    "LHSGroupFilter",
    "ResetInserter",
    "EnableInserter",
]

class ValueVisitor(metaclass=ABCMeta):
    @abstractmethod
    def on_Const(self, value): ...
    @abstractmethod
    def on_AnyConst(self, value): ...
    @abstractmethod
    def on_AnySeq(self, value): ...
    @abstractmethod
    def on_Signal(self, value): ...
    @abstractmethod
    def on_ClockSignal(self, value): ...
    @abstractmethod
    def on_ResetSignal(self, value): ...
    @abstractmethod
    def on_Operator(self, value): ...
    @abstractmethod
    def on_Slice(self, value): ...
    @abstractmethod
    def on_Part(self, value): ...
    @abstractmethod
    def on_Cat(self, value): ...
    @abstractmethod
    def on_Repl(self, value): ...
    @abstractmethod
    def on_ArrayProxy(self, value): ...
    @abstractmethod
    def on_Sample(self, value): ...
    @abstractmethod
    def on_Initial(self, value): ...
    def on_unknown_value(self, value): ...
    def replace_value_src_loc(self, value, new_value): ...
    def on_value(self, value): ...
    def __call__(self, value): ...

class ValueTransformer(ValueVisitor):
    def on_Const(self, value): ...
    def on_AnyConst(self, value): ...
    def on_AnySeq(self, value): ...
    def on_Signal(self, value): ...
    def on_ClockSignal(self, value): ...
    def on_ResetSignal(self, value): ...
    def on_Operator(self, value): ...
    def on_Slice(self, value): ...
    def on_Part(self, value): ...
    def on_Cat(self, value): ...
    def on_Repl(self, value): ...
    def on_ArrayProxy(self, value): ...
    def on_Sample(self, value): ...
    def on_Initial(self, value): ...

class StatementVisitor(metaclass=ABCMeta):
    @abstractmethod
    def on_Assign(self, stmt): ...
    @abstractmethod
    def on_Assert(self, stmt): ...
    @abstractmethod
    def on_Assume(self, stmt): ...
    @abstractmethod
    def on_Cover(self, stmt): ...
    @abstractmethod
    def on_Switch(self, stmt): ...
    @abstractmethod
    def on_statements(self, stmts): ...
    def on_unknown_statement(self, stmt): ...
    def replace_statement_src_loc(self, stmt, new_stmt): ...
    def on_statement(self, stmt): ...
    def __call__(self, stmt): ...

class StatementTransformer(StatementVisitor):
    def on_value(self, value): ...
    def on_Assign(self, stmt): ...
    def on_Assert(self, stmt): ...
    def on_Assume(self, stmt): ...
    def on_Cover(self, stmt): ...
    def on_Switch(self, stmt): ...
    def on_statements(self, stmts): ...

class FragmentTransformer:
    def map_subfragments(self, fragment, new_fragment): ...
    def map_ports(self, fragment, new_fragment): ...
    def map_named_ports(self, fragment, new_fragment): ...
    def map_domains(self, fragment, new_fragment): ...
    def map_statements(self, fragment, new_fragment): ...
    def map_drivers(self, fragment, new_fragment): ...
    def on_fragment(self, fragment): ...
    def __call__(self, value, *, src_loc_at=...): ...

class TransformedElaboratable(Elaboratable):
    def __init__(self, elaboratable, *, src_loc_at=...) -> None: ...
    def __getattr__(self, attr): ...
    def elaborate(self, platform): ...

class DomainCollector(ValueVisitor, StatementVisitor):
    def __init__(self) -> None: ...
    def on_ignore(self, value): ...

    on_Const = ...
    on_AnyConst = ...
    on_AnySeq = ...
    on_Signal = ...
    def on_ClockSignal(self, value): ...
    def on_ResetSignal(self, value): ...
    def on_Operator(self, value): ...
    def on_Slice(self, value): ...
    def on_Part(self, value): ...
    def on_Cat(self, value): ...
    def on_Repl(self, value): ...
    def on_ArrayProxy(self, value): ...
    def on_Sample(self, value): ...
    def on_Initial(self, value): ...
    def on_Assign(self, stmt): ...
    def on_property(self, stmt): ...

    on_Assert = ...
    on_Assume = ...
    on_Cover = ...
    def on_Switch(self, stmt): ...
    def on_statements(self, stmts): ...
    def on_fragment(self, fragment): ...
    def __call__(self, fragment): ...

class DomainRenamer(FragmentTransformer, ValueTransformer, StatementTransformer):
    def __init__(self, domain_map) -> None: ...
    def on_ClockSignal(self, value): ...
    def on_ResetSignal(self, value): ...
    def map_domains(self, fragment, new_fragment): ...
    def map_drivers(self, fragment, new_fragment): ...

class DomainLowerer(FragmentTransformer, ValueTransformer, StatementTransformer):
    def __init__(self, domains=...) -> None: ...
    def map_drivers(self, fragment, new_fragment): ...
    def replace_value_src_loc(self, value, new_value): ...
    def on_ClockSignal(self, value): ...
    def on_ResetSignal(self, value): ...
    def on_fragment(self, fragment): ...

class SampleDomainInjector(ValueTransformer, StatementTransformer):
    def __init__(self, domain) -> None: ...
    def on_Sample(self, value): ...
    def __call__(self, stmts): ...

class SampleLowerer(FragmentTransformer, ValueTransformer, StatementTransformer):
    def __init__(self) -> None: ...
    def on_Sample(self, value): ...
    def on_Initial(self, value): ...
    def map_statements(self, fragment, new_fragment): ...

class SwitchCleaner(StatementVisitor):
    def on_ignore(self, stmt): ...

    on_Assign = ...
    on_Assert = ...
    on_Assume = ...
    on_Cover = ...
    def on_Switch(self, stmt): ...
    def on_statements(self, stmts): ...

class LHSGroupAnalyzer(StatementVisitor):
    def __init__(self) -> None: ...
    def find(self, signal): ...
    def unify(self, root, *leaves): ...
    def groups(self): ...
    def on_Assign(self, stmt): ...
    def on_property(self, stmt): ...

    on_Assert = ...
    on_Assume = ...
    on_Cover = ...
    def on_Switch(self, stmt): ...
    def on_statements(self, stmts): ...
    def __call__(self, stmts): ...

class LHSGroupFilter(SwitchCleaner):
    def __init__(self, signals) -> None: ...
    def on_Assign(self, stmt): ...
    def on_property(self, stmt): ...

    on_Assert = ...
    on_Assume = ...
    on_Cover = ...

class _ControlInserter(FragmentTransformer):
    def __init__(self, controls) -> None: ...
    def on_fragment(self, fragment): ...
    def __call__(self, value, *, src_loc_at=...): ...

class ResetInserter(_ControlInserter): ...

class EnableInserter(_ControlInserter):
    def on_fragment(self, fragment): ...
