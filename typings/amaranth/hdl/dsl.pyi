"""
This type stub file was generated by pyright.
"""

from contextlib import _GeneratorContextManager, contextmanager
from .ast import *
from .ir import *
from .cd import *
from .xfrm import *

__all__ = ["SyntaxError", "SyntaxWarning", "Module"]

class SyntaxError(Exception): ...
class SyntaxWarning(Warning): ...

class _ModuleBuilderProxy:
    def __init__(self, builder, depth) -> None: ...

class _ModuleBuilderDomain(_ModuleBuilderProxy):
    def __init__(self, builder, depth, domain) -> None: ...
    def __iadd__(self, assigns): ...

class _ModuleBuilderDomains(_ModuleBuilderProxy):
    def __getattr__(self, name): ...
    def __getitem__(self, name): ...
    def __setattr__(self, name, value): ...
    def __setitem__(self, name, value): ...

class _ModuleBuilderRoot:
    def __init__(self, builder, depth) -> None: ...
    def __getattr__(self, name): ...

class _ModuleBuilderSubmodules:
    def __init__(self, builder) -> None: ...
    def __iadd__(self, modules): ...
    def __setattr__(self, name, submodule): ...
    def __setitem__(self, name, value): ...
    def __getattr__(self, name): ...
    def __getitem__(self, name): ...

class _ModuleBuilderDomainSet:
    def __init__(self, builder) -> None: ...
    def __iadd__(self, domains): ...
    def __setattr__(self, name, domain): ...

class _GuardedContextManager(_GeneratorContextManager):
    def __init__(self, keyword, func, args, kwds) -> None: ...
    def __bool__(self): ...

class FSM:
    def __init__(self, state, encoding, decoding) -> None: ...
    def ongoing(self, name): ...

class Module(_ModuleBuilderRoot, Elaboratable):
    @classmethod
    def __init_subclass__(cls): ...
    def __init__(self) -> None: ...
    @_guardedcontextmanager("If")
    def If(self, cond): ...
    @_guardedcontextmanager("Elif")
    def Elif(self, cond): ...
    @_guardedcontextmanager("Else")
    def Else(self): ...
    @contextmanager
    def Switch(self, test): ...
    @contextmanager
    def Case(self, *patterns): ...
    def Default(self): ...
    @contextmanager
    def FSM(self, reset=..., domain=..., name=...): ...
    @contextmanager
    def State(self, name): ...
    @property
    def next(self): ...
    @next.setter
    def next(self, name): ...
    def elaborate(self, platform): ...
