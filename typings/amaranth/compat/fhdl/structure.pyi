"""
This type stub file was generated by pyright.
"""

from ..._utils import deprecated, extend
from ...hdl import ast
from ...hdl.ast import ArrayProxy as _ArrayProxy, Cat, Const, Signal as NativeSignal

__all__ = [
    "DUID",
    "wrap",
    "Mux",
    "Cat",
    "Replicate",
    "Constant",
    "C",
    "Signal",
    "ClockSignal",
    "ResetSignal",
    "If",
    "Case",
    "Array",
    "ClockDomain",
]

@deprecated("instead of `wrap`, use `Value.ca")
def wrap(v): ...

class CompatSignal(NativeSignal):
    def __init__(
        self,
        bits_sign=...,
        name=...,
        variable=...,
        reset=...,
        reset_less=...,
        name_override=...,
        min=...,
        max=...,
        related=...,
        attr=...,
        src_loc_at=...,
        **kwargs
    ) -> None: ...

Signal = CompatSignal

@deprecated("instead of `Constant`, use `Cons")
def Constant(value, bits_sign=...): ...
@deprecated("instead of `Replicate`, use `Rep")
def Replicate(v, n): ...
@extend(Const)
@property
@deprecated("instead of `.nbits`, use `.width")
def nbits(self): ...
@extend(NativeSignal)
@property
@deprecated("instead of `.nbits`, use `.width")
def nbits(self): ...
@extend(NativeSignal)
@NativeSignal.nbits.setter
@deprecated("instead of `.nbits = x`, use `.w")
def nbits(self, value): ...
@extend(NativeSignal)
@deprecated("instead of `.part`, use `.bit_se")
def part(self, offset, width): ...
@extend(Cat)
@property
@deprecated("instead of `.l`, use `.parts`")
def l(self): ...
@extend(ast.Operator)
@property
@deprecated("instead of `.op`, use `.operator")
def op(self): ...
@extend(_ArrayProxy)
@property
@deprecated("instead `_ArrayProxy.choices`, u")
def choices(self): ...

class If(ast.Switch):
    @deprecated("instead of `If(cond, ...)`, use ")
    def __init__(self, cond, *stmts) -> None: ...
    @deprecated("instead of `.Elif(cond, ...)`, u")
    def Elif(self, cond, *stmts): ...
    @deprecated("instead of `.Else(...)`, use `wi")
    def Else(self, *stmts): ...

class Case(ast.Switch):
    @deprecated("instead of `Case(test, { value: " "`with m.Case(value): stmts`; ins" "`with m.Case(): stmts`")
    def __init__(self, test, cases) -> None: ...
    @deprecated("instead of `Case(...).makedefaul" "`with m.Case(): ...`")
    def makedefault(self, key=...): ...
