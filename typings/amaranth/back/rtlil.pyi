"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from ..hdl import xfrm

__all__ = ["convert", "convert_fragment"]
_escape_map = ...

class _Namer:
    def __init__(self) -> None: ...
    def anonymous(self): ...

class _BufferedBuilder:
    def __init__(self) -> None: ...
    def __str__(self) -> str: ...

class _ProxiedBuilder: ...

class _AttrBuilder:
    def __init__(self, emit_src, *args, **kwargs) -> None: ...

class _Builder(_BufferedBuilder, _Namer):
    def __init__(self, emit_src) -> None: ...
    def module(self, name=..., attrs=...): ...

class _ModuleBuilder(_AttrBuilder, _BufferedBuilder, _Namer):
    def __init__(self, rtlil, name, attrs) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def wire(self, width, port_id=..., port_kind=..., name=..., attrs=..., src=...): ...
    def connect(self, lhs, rhs): ...
    def memory(self, width, size, name=..., attrs=..., src=...): ...
    def cell(self, kind, name=..., params=..., ports=..., attrs=..., src=...): ...
    def process(self, name=..., attrs=..., src=...): ...

class _ProcessBuilder(_AttrBuilder, _BufferedBuilder):
    def __init__(self, rtlil, name, attrs, src) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def case(self): ...
    def sync(self, kind, cond=...): ...

class _CaseBuilder(_ProxiedBuilder):
    def __init__(self, rtlil, indent) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def assign(self, lhs, rhs): ...
    def switch(self, cond, attrs=..., src=...): ...

class _SwitchBuilder(_AttrBuilder, _ProxiedBuilder):
    def __init__(self, rtlil, cond, attrs, src, indent) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def case(self, *values, attrs=..., src=...): ...

class _SyncBuilder(_ProxiedBuilder):
    def __init__(self, rtlil, kind, cond) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def update(self, lhs, rhs): ...

class _LegalizeValue(Exception):
    def __init__(self, value, branches, src_loc) -> None: ...

class _ValueCompilerState:
    def __init__(self, rtlil) -> None: ...
    def add_driven(self, signal, sync): ...
    def add_port(self, signal, kind): ...
    def resolve(self, signal, prefix=...): ...
    def resolve_curr(self, signal, prefix=...): ...
    def expand(self, value): ...
    @contextmanager
    def expand_to(self, value, expansion): ...

class _ValueCompiler(xfrm.ValueVisitor):
    def __init__(self, state) -> None: ...
    def on_unknown(self, value): ...
    def on_ClockSignal(self, value): ...
    def on_ResetSignal(self, value): ...
    def on_Sample(self, value): ...
    def on_Initial(self, value): ...
    def on_Cat(self, value): ...
    def on_Slice(self, value): ...
    def on_ArrayProxy(self, value): ...

class _RHSValueCompiler(_ValueCompiler):
    operator_map = ...
    def on_value(self, value): ...
    def on_Const(self, value): ...
    def on_AnyConst(self, value): ...
    def on_AnySeq(self, value): ...
    def on_Signal(self, value): ...
    def on_Operator_unary(self, value): ...
    def match_shape(self, value, new_bits, new_sign): ...
    def on_Operator_binary(self, value): ...
    def on_Operator_mux(self, value): ...
    def on_Operator(self, value): ...
    def on_Part(self, value): ...
    def on_Repl(self, value): ...

class _LHSValueCompiler(_ValueCompiler):
    def on_Const(self, value): ...
    def on_AnyConst(self, value): ...
    def on_AnySeq(self, value): ...
    def on_Operator(self, value): ...
    def match_shape(self, value, new_bits, new_sign): ...
    def on_Signal(self, value): ...
    def on_Part(self, value): ...
    def on_Repl(self, value): ...

class _StatementCompiler(xfrm.StatementVisitor):
    def __init__(self, state, rhs_compiler, lhs_compiler) -> None: ...
    @contextmanager
    def case(self, switch, values, attrs=..., src=...): ...
    def on_Assign(self, stmt): ...
    def on_property(self, stmt): ...

    on_Assert = ...
    on_Assume = ...
    on_Cover = ...
    def on_Switch(self, stmt): ...
    def on_statement(self, stmt): ...
    def on_statements(self, stmts): ...

def convert_fragment(fragment, name=..., *, emit_src=...): ...
def convert(elaboratable, name=..., platform=..., ports=..., *, emit_src=..., **kwargs): ...
